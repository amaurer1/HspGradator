//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ImageView.cpp
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2022 Adrian Maurer. All rights reserved.
// Distributed under the GPL-3.0 software license (https://opensource.org/licenses/GPL-3.0).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "pch.h"
#include "framework.h"
#include "ImageView.h"
#include "HspGradatorApp.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CImageView
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CImageView - CONSTRUCTION / DESTRUCTION / ASSIGNMENT
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CImageView::CImageView() : 
	p_image(nullptr), 
	wndSize(0, 0), 
	imageOrigin(0, 0), 
	imageSize(0, 0)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
IMPLEMENT_DYNCREATE(CImageView, CView)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CImageView - ELEMENT FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CImageView::update(const CTrueColorImage* const p_mi)
{
	p_image = p_mi;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CImageView::recalcLayout()
{
	if (p_image && !p_image->IsNull())
	{
		const float isr = static_cast<float>(p_image->calcSizeRatio());
		const CSize& ws = wndSize;
		const float wsr = ws.cy / static_cast<float>(ws.cx);
		const float f = 1.025F;
		if (isr < 1.0F)
		{
			if (isr < wsr)
			{
				imageSize.cx = ama::round(ws.cx / f);
				imageSize.cy = ama::round(ws.cx / f * isr);
			}
			else
			{
				imageSize.cx = ama::round(ws.cy / f / isr);
				imageSize.cy = ama::round(ws.cy / f);
			}
		}
		else
		{
			if (isr > wsr)
			{
				imageSize.cx = ama::round(ws.cy / f / isr);
				imageSize.cy = ama::round(ws.cy / f);
			}
			else
			{
				imageSize.cx = ama::round(ws.cx / f);
				imageSize.cy = ama::round(ws.cx / f * isr);
			}
		}
		imageOrigin.x = ama::round((ws.cx - imageSize.cx) / 2.0F);
		imageOrigin.y = ama::round((ws.cy - imageSize.cy) / 2.0F);
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CImageView::refresh()
{
	Invalidate(FALSE);
	UpdateWindow();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CImageView - OVERRIDES
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BOOL CImageView::PreCreateWindow(CREATESTRUCT& cs)
{
	if (CView::PreCreateWindow(cs))
	{
		cs.dwExStyle |= WS_EX_CLIENTEDGE;
		cs.style &= ~WS_BORDER;
		cs.lpszClass = AfxRegisterWndClass(CS_HREDRAW | CS_VREDRAW | CS_DBLCLKS, ::LoadCursor(nullptr, IDC_ARROW));
		return TRUE;
	}
	return FALSE;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CImageView::OnDraw(CDC* pDC)
{
	const COLORREF bc = ::GetSysColor(COLOR_3DLIGHT);
	if (pDC)
	{
		if (p_image && !p_image->IsNull())
		{
			pDC->FillSolidRect(0, 0, imageOrigin.x, wndSize.cy, bc);
			pDC->FillSolidRect(imageOrigin.x + imageSize.cx, 0, wndSize.cx - imageOrigin.x - imageSize.cx, wndSize.cy, bc);
			pDC->FillSolidRect(imageOrigin.x, 0, imageSize.cx, imageOrigin.y, bc);
			pDC->FillSolidRect(imageOrigin.x, imageOrigin.y + imageSize.cy, imageSize.cx, wndSize.cy - imageOrigin.y - imageSize.cy, bc);
			pDC->SetStretchBltMode(COLORONCOLOR);
			p_image->StretchBlt(pDC->GetSafeHdc(), imageOrigin.x, imageOrigin.y, imageSize.cx, imageSize.cy);
		}
		else
		{
			CRect wr(0, 0, wndSize.cx, wndSize.cy);
			pDC->FillSolidRect(wr, bc);
			pDC->SetTextColor(::GetSysColor(COLOR_WINDOWTEXT));
			pDC->DrawText(L"Double click to load image", &wr, DT_SINGLELINE | DT_CENTER | DT_VCENTER);
		}
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CImageView - MESSAGE MAP FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
BEGIN_MESSAGE_MAP(CImageView, CView)
	ON_WM_SIZE()
	ON_WM_LBUTTONDBLCLK()
END_MESSAGE_MAP()
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CImageView::OnSize(UINT nType, int cx, int cy)
{
	CView::OnSize(nType, cx, cy);
	wndSize = {cx, cy};
	recalcLayout();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CImageView::OnLButtonDblClk(UINT nFlags, CPoint point)
{
	sendMessageToMainWnd(WM_COMMAND, ID_FILE_LOAD_IMAGE);
	CView::OnLButtonDblClk(nFlags, point);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
