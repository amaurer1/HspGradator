//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// AlphaColor.h
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2022 Adrian Maurer. All rights reserved.
// Distributed under the MIT software license (http://www.opensource.org/licenses/mit-license.php).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifndef AMA_ALPHA_COLOR_H
#define AMA_ALPHA_COLOR_H
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Color.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
namespace ama {
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// AlphaColor<T, U>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U = Color<T>>
class AlphaColor
{
// ELEMENT DATA
public:
	Color<T> color;
	U alpha;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	constexpr AlphaColor() noexcept : color(), alpha() {}
	constexpr AlphaColor(const T c, const U& a) noexcept : color(c), alpha(a) {}
	constexpr AlphaColor(const Color<T>& c, const U& a) noexcept : color(c), alpha(a) {}

// ELEMENT FUNCTIONS
public:
	constexpr AlphaColor& operator+=(const AlphaColor<T, U>& ac) noexcept {color += ac.color, alpha += ac.alpha; return *this;}
	constexpr AlphaColor& operator-=(const AlphaColor<T, U>& ac) noexcept {color -= ac.color, alpha -= ac.alpha; return *this;}
	constexpr AlphaColor& operator*=(const AlphaColor<T, U>& ac) noexcept {color *= ac.color, alpha *= ac.alpha; return *this;}
	constexpr AlphaColor& operator/=(const AlphaColor<T, U>& ac) noexcept {color /= ac.color, alpha /= ac.alpha; return *this;}
	constexpr AlphaColor& operator+=(const T v) noexcept {color += v, alpha += v; return *this;}
	constexpr AlphaColor& operator-=(const T v) noexcept {color -= v, alpha -= v; return *this;}
	constexpr AlphaColor& operator*=(const T v) noexcept {color *= v, alpha *= v; return *this;}
	constexpr AlphaColor& operator/=(const T v) noexcept {color /= v, alpha /= v; return *this;}
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// AlphaColor<T> - GOBAL FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator+(AlphaColor<T, U> ac1, const AlphaColor<T, U>& ac2) noexcept
{
	return ac1 += ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator-(AlphaColor<T, U> ac1, const AlphaColor<T, U>& ac2) noexcept
{
	return ac1 -= ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator*(AlphaColor<T, U> ac1, const AlphaColor<T, U>& ac2) noexcept
{
	return ac1 *= ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator/(AlphaColor<T, U> ac1, const AlphaColor<T, U>& ac2) noexcept
{
	return ac1 /= ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator+(AlphaColor<T, U> ac, const T& v) noexcept
{
	return ac += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator+(const T& v, AlphaColor<T, U> ac) noexcept
{
	return ac += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator-(AlphaColor<T, U> ac, const T& v) noexcept
{
	return ac -= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator-(const T& v, AlphaColor<T, U> ac) noexcept
{
	return {v - ac.color, v - ac.alpha};
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator*(AlphaColor<T, U> ac, const T& v) noexcept
{
	return ac *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator*(const T& v, AlphaColor<T, U> ac) noexcept
{
	return ac *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator/(AlphaColor<T, U> ac, const T& v) noexcept
{
	return ac /= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
constexpr AlphaColor<T, U> operator/(const T& v, AlphaColor<T, U> ac) noexcept
{
	return {v / ac.color, v / ac.alpha};
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
} //namespace ama
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#endif // AMA_ALPHA_COLOR_H
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
