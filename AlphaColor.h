//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// AlphaColor.h
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2020 Adrian Maurer. All rights reserved.
// Distributed under the MIT software license (http://www.opensource.org/licenses/mit-license.php).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "Color.h"
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TAlphaColor<T, U>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U = TColor<T>>
class TAlphaColor : public TColor<T>
{
// ELEMENT DATA
public:
	U alpha;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	TAlphaColor(const T v = T(0)) : TColor<T>(v), alpha(v) {}
	TAlphaColor(const TColor<T>& c) : TColor<T>(c), alpha(U(1)) {}
	TAlphaColor(const TColor<T>& c, const U& a) : TColor<T>(c), alpha(a) {}

// ELEMENT FUNCTIONS
public:
	TAlphaColor& operator+=(const TAlphaColor<T, U>& ac) {TColor<T>::operator+=(ac), alpha += ac.alpha; return *this;}
	TAlphaColor& operator-=(const TAlphaColor<T, U>& ac) {TColor<T>::operator-=(ac), alpha -= ac.alpha; return *this;}
	TAlphaColor& operator*=(const TAlphaColor<T, U>& ac) {TColor<T>::operator*=(ac), alpha *= ac.alpha; return *this;}
	TAlphaColor& operator/=(const TAlphaColor<T, U>& ac) {TColor<T>::operator/=(ac), alpha /= ac.alpha; return *this;}
	TAlphaColor& operator=(const T v) {TColor<T>::operator=(v), alpha = v; return *this;}
	TAlphaColor& operator+=(const T v) {TColor<T>::operator+=(v), alpha += v; return *this;}
	TAlphaColor& operator-=(const T v) {TColor<T>::operator-=(v), alpha -= v; return *this;}
	TAlphaColor& operator*=(const T v) {TColor<T>::operator*=(v), alpha *= v; return *this;}
	TAlphaColor& operator/=(const T v) {TColor<T>::operator/=(v), alpha /= v; return *this;}
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TAlphaColor<T> - GOBAL FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator+(TAlphaColor<T, U> ac1, const TAlphaColor<T, U>& ac2)
{
	return ac1 += ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator-(TAlphaColor<T, U> ac1, const TAlphaColor<T, U>& ac2)
{
	return ac1 -= ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator*(TAlphaColor<T, U> ac1, const TAlphaColor<T, U>& ac2)
{
	return ac1 *= ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator/(TAlphaColor<T, U> ac1, const TAlphaColor<T, U>& ac2)
{
	return ac1 /= ac2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator+(TAlphaColor<T, U> ac, const T v)
{
	return ac += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator+(const T v, TAlphaColor<T, U>& ac)
{
	return ac += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator-(TAlphaColor<T, U> ac, const T v)
{
	return ac -= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator-(const T v, const TAlphaColor<T, U>& ac)
{
	return TAlphaColor<T>({v - ac.r, v - ac.g, v - ac.b}, {v - ac.alpha.r, v - ac.alpha.g, v - ac.alpha.b});
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator*(TAlphaColor<T, U> ac, const T v)
{
	return ac *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator*(const T v, TAlphaColor<T, U>& ac)
{
	return ac *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator/(TAlphaColor<T, U> ac, const T v)
{
	return ac /= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T, class U>
inline TAlphaColor<T, U> operator/(const T v, const TAlphaColor<T, U>& ac)
{
	return TAlphaColor<T>({v / ac.r, v / ac.g, v / ac.b}, {v / ac.alpha.r, v / ac.alpha.g, v / ac.alpha.b});
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
