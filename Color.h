//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Color.h
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Copyright (c) 2020 Adrian Maurer. All rights reserved.
// Distributed under the MIT software license (http://www.opensource.org/licenses/mit-license.php).
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TColor<T>
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
class TColor
{
// ELEMENT DATA
public:
	T r, g, b;

// CONSTRUCTION / DESTRUCTION / ASSIGNMENT
public:
	TColor(const T v = T(0)) : r(v), g(v), b(v) {}
	TColor(const T vr, const T vg, const T vb) : r(vr), g(vg), b(vb) {}

// ELEMENT FUNCTIONS
public:
	TColor& operator+() {return *this;}
	TColor& operator-() {r = -r, g = -g, b = -b; return *this;}
	TColor& operator+=(const TColor<T>& c) {r += c.r, g += c.g, b += c.b; return *this;}
	TColor& operator-=(const TColor<T>& c) {r -= c.r, g -= c.g, b -= c.b; return *this;}
	TColor& operator*=(const TColor<T>& c) {r *= c.r, g *= c.g, b *= c.b; return *this;}
	TColor& operator/=(const TColor<T>& c) {r /= c.r, g /= c.g, b /= c.b; return *this;}
	TColor& operator=(const T v) {r = v, g = v, b = v; return *this;}
	TColor& operator+=(const T v) {r += v, g += v, b += v; return *this;}
	TColor& operator-=(const T v) {r -= v, g -= v, b -= v; return *this;}
	TColor& operator*=(const T v) {r *= v, g *= v, b *= v; return *this;}
	TColor& operator/=(const T v) {r /= v, g /= v, b /= v; return *this;}
	const T& operator[](const int) const;
	T& operator[](const int);
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TColor<T> - ELEMENT FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline const T& TColor<T>::operator[](const int i) const
{
	switch (i)
	{
		case 0: return r;
		case 1: return g;
		default: return b;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline T& TColor<T>::operator[](const int i)
{
	switch (i)
	{
		case 0: return r;
		case 1: return g;
		default: return b;
	}
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// TColor<T> - GOBAL FUNCTIONS
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator+(TColor<T> c1, const TColor<T>& c2)
{
	return c1 += c2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator-(TColor<T> c1, const TColor<T>& c2)
{
	return c1 -= c2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator*(TColor<T> c1, const TColor<T>& c2)
{
	return c1 *= c2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator/(TColor<T> c1, const TColor<T>& c2)
{
	return c1 /= c2;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator+(TColor<T> c, const T v)
{
	return c += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator+(const T v, TColor<T> c)
{
	return c += v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator-(TColor<T> c, const T v)
{
	return c -= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator-(const T v, const TColor<T>& c)
{
	return TColor<T>(v - c.r, v - c.g, v - c.b);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator*(TColor<T> c, const T v)
{
	return c *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator*(const T v, TColor<T> c)
{
	return c *= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator/(TColor<T> c, const T v)
{
	return c /= v;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <class T>
inline TColor<T> operator/(const T v, const TColor<T>& c)
{
	return TColor<T>(v / c.r, v / c.g, v / c.b);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
